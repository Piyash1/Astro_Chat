============================================================================
AUTH CONTEXT EXPLANATION FOR BEGINNERS
============================================================================

WHAT IS AUTH CONTEXT?

Think of AuthContext as a "global state manager" for user authentication.
It's like having a shared box that any component in your app can access
to check if a user is logged in, get user information, or log them out.

WHY DO WE NEED IT?

Without AuthContext, each component would need to:
1. Check localStorage separately
2. Make API calls to get user info
3. Handle login/logout logic individually

With AuthContext, we do this once and share it everywhere!

HOW IT WORKS:

1. AuthProvider wraps your entire app (in layout.tsx)
2. It stores user data in React state
3. Any component can use useAuth() to access this data
4. When user logs in/out, all components automatically update

COMPONENTS:
- AuthProvider: The "container" that holds all auth data
- useAuth: A "hook" that components use to access auth data
- AuthContext: The "bridge" that connects them

============================================================================
STEP 1: Define what data we want to share globally
============================================================================

type AuthContextValue = {
  isAuthenticated: boolean;        // true if user is logged in
  user: IUser | null;             // user's info (name, email, etc.)
  accessToken: string | null;      // JWT token for API calls
  refreshToken: string | null;     // Token to get new access tokens
  setTokens: (access: string | null, refresh: string | null) => void;  // Save tokens
  logout: () => Promise<void>;     // Log out user
  refreshUser: () => Promise<void>; // Get fresh user info from server
};

============================================================================
STEP 2: Create the Context (the "bridge")
============================================================================

const AuthContext = createContext<AuthContextValue | undefined>(undefined);

This creates an empty context that we'll fill with data later.

============================================================================
STEP 3: Create the Provider (the "container")
============================================================================

The AuthProvider component:
1. Manages React state for user data
2. Handles localStorage persistence
3. Provides auth functions
4. Makes data available to all child components

State Management:
- accessToken: JWT token for API authentication
- refreshToken: Token used to get new access tokens
- user: User information from the server

Initialization:
- Checks localStorage for existing tokens on app startup
- Restores user session if tokens exist

Token Management:
- setTokens(): Saves tokens to both React state and localStorage
- Handles both setting and removing tokens

User Info Management:
- refreshUser(): Fetches current user info from server
- Automatically runs when accessToken changes
- Sets user to null if API call fails

Logout Function:
- Calls API to invalidate tokens on server
- Clears all local data (tokens and user info)
- Handles errors gracefully

============================================================================
STEP 4: Create the Hook (the "key" to access the data)
============================================================================

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  
  return context;
};

This hook:
- Gets auth data from context
- Includes safety check to ensure it's used correctly
- Returns all auth data and functions

============================================================================
HOW TO USE THIS IN COMPONENTS:
============================================================================

Example 1: Check if user is logged in
function MyComponent() {
  const { isAuthenticated } = useAuth();
  
  if (isAuthenticated) {
    return <div>Welcome back!</div>;
  } else {
    return <div>Please log in</div>;
  }
}

Example 2: Get user information
function UserProfile() {
  const { user } = useAuth();
  
  return (
    <div>
      <h1>Hello, {user?.username}!</h1>
      <p>Email: {user?.email}</p>
    </div>
  );
}

Example 3: Login a user
function LoginButton() {
  const { setTokens } = useAuth();
  
  const handleLogin = async () => {
    // After successful login API call...
    const response = await login(email, password);
    
    // Save tokens to context and localStorage
    setTokens(response.tokens.access, response.tokens.refresh);
  };
  
  return <button onClick={handleLogin}>Login</button>;
}

Example 4: Logout
function LogoutButton() {
  const { logout } = useAuth();
  
  return <button onClick={logout}>Logout</button>;
}

============================================================================
SETUP INSTRUCTIONS:
============================================================================

1. Wrap your app with AuthProvider in layout.tsx:
   <AuthProvider>
     <Navbar />
     {children}
   </AuthProvider>

2. Use useAuth() in any component to access auth data:
   const { isAuthenticated, user, logout } = useAuth();

3. The context automatically:
   - Persists login state across page refreshes
   - Updates all components when auth state changes
   - Handles token management and API calls

============================================================================
BENEFITS:
============================================================================

✅ Centralized authentication logic
✅ Automatic state synchronization across components
✅ Persistent login sessions
✅ Clean separation of concerns
✅ Type-safe with TypeScript
✅ Easy to test and maintain
✅ Follows React best practices
